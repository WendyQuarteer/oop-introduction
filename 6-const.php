<?php
declare(strict_types=1);
/* EXERCISE 6
Copy the classes of exercise 2.
Use typehinting everywhere!
*/
class Beverage
{
//TODO: Change the properties to private.
    private string $color;           //private = can only be accessed from within class.
    private float $price;
    private string $temperature;
// TODO: Make a const barname with the value 'Het Vervolg'
    const BARNAME = 'Het Vervolg';

    /**                              //annotations provide supplemental information.
     * @param string $color
     * @param float $price
     */
    public function __construct(string $color, float $price)
    {
        $this->color = $color;  //assigning values to the properties
        $this->price = $price;
        $this->temperature = 'cold';    //temperature gets default-value
    }

//TODO: Create a function in beverage and use the constant.
    public function barName():void
    {
      echo self::BARNAME;
    }
    /**
     * @return void
     */
    public function getInfo(): void
    {
        echo "This beverage is $this->temperature and $this->color";    //echo to print.
    }
}

class Beer extends Beverage
{
    //TODO: Change the properties to private.
    public string $name;
    public float $alcoholPercentage;

    /**
     * @param string $name
     * @param float $alcoholPercentage
     * @param string $color
     * @param float $price
     */
    public function __construct(string $name, float $alcoholPercentage, string $color, float $price)
    {
        parent:: __construct($color, $price);
        $this->name = $name;
        $this->alcoholPercentage = $alcoholPercentage;
    }

    //TODO: Create a function in beverage and use the constant.
    public function barName(): void
    {
        parent::barName(); // TODO: Change the autogenerated stub
    }

    /**
     * @return float
     */
    public function getAlcoholPercentage(): float
    {
        return $this->alcoholPercentage;
    }
}

##ex1
$cola = new Beverage("black", 2); //new object from class = child.
//$cola->temperature = "hot";                 //change the default-value.
$cola->getInfo();                              //display the getInfo of the new object.
echo "<br>";

##ex2
$duvel = new Beer('duvel', 8.5, 'blond', 3.5);
echo $duvel->getAlcoholPercentage();
//Make sure that each print is on a different line.
echo "<br>";
echo $duvel->alcoholPercentage;
echo "<br>";
//echo $duvel->color;     //cannot access = private
echo "<br>";
echo $duvel->getInfo();
echo "<br>";
//TODO: Print the constant on the screen.
echo Beverage::BARNAME;
echo "<br>";
//TODO: Print the output of these functions on the screen.
echo $cola->barname();      //output function class Beverage
echo "<br>";
echo $duvel->barname();     //output function class Beer
echo "<br>";

